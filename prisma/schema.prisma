// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model Post {
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   slug     String    @unique
//   title    String
//   body     String
//   comments Comment[]
//   author   User      @relation(fields: [authorId], references: [id])
//   authorId String    @db.ObjectId
// }

// // Comments包含一个评论字符串并连接回帖子。
// // postId必须有@db。与Post的id类型匹配
// model Comment {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   post    Post   @relation(fields: [postId], references: [id])
//   postId  String @db.ObjectId
//   comment String
// }

// model User {
//   id    String  @id @default(auto()) @map("_id") @db.ObjectId
//   email String  @unique
//   name  String?
//   posts Post[]
// }

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @unique //用户账号
  userName      String //用户名
  email         String          @unique
  sex           Boolean?
  password      String
  birthday      String?
  description   String?
  headPortrait  String          @default("url")
  createTime    DateTime        @default(now())
  updatedTime   DateTime        @updatedAt
  friend        Friend[]
  chatRoom      ChatRoom[]
  member        Member[]
  message       Message[]
  conservator   Conservator[]
  friendMessage FriendMessage[]
}

model Friend {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  friendId    String   @db.ObjectId
  state       Int
  createTime  DateTime @default(now())
  updatedTime DateTime @updatedAt
}

model FriendMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  friendId    String   @db.ObjectId
  information String
  sort        Int
  createTime  DateTime @default(now())
  updatedTime DateTime @updatedAt
}

model ChatRoom {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  roomId      String         @unique
  user        User           @relation(fields: [ownerId], references: [id])
  ownerId     String         @db.ObjectId
  name        String
  description String?
  category    Category       @default(COMMON)
  img         String
  createTime  DateTime       @default(now())
  updatedTime DateTime       @updatedAt
  member      Member[]
  group       ChannelGroup[]
}

enum Category {
  COMMON
  GAME
  FRIEND
  LIFE
  CITY
}

model Member {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  room        ChatRoom @relation(fields: [roomId], references: [id])
  roomId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createTime  DateTime @default(now())
  updatedTime DateTime @updatedAt
}

model ChannelGroup {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  chatRoom    ChatRoom  @relation(fields: [roomId], references: [id])
  roomId      String    @db.ObjectId
  sort        Int
  channel     Channel[]
  createTime  DateTime  @default(now())
  updatedTime DateTime  @updatedAt
}

model Channel {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  message     Message[]
  conservator Conservator[]
  group       ChannelGroup  @relation(fields: [groupId], references: [id])
  groupId     String        @db.ObjectId
  createTime  DateTime      @default(now())
  updatedTime DateTime      @updatedAt
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  channel     Channel  @relation(fields: [channelId], references: [id])
  channelId   String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  information String
  sort        Int
  createTime  DateTime @default(now())
  updatedTime DateTime @updatedAt
}

model Conservator {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  channel     Channel  @relation(fields: [channelId], references: [id])
  channelId   String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createTime  DateTime @default(now())
  updatedTime DateTime @updatedAt
}

model Code {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  code        Int
  createTime  DateTime @default(now())
  updatedTime DateTime @updatedAt
}
